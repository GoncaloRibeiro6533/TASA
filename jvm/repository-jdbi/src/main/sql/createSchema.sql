CREATE SCHEMA IF NOT EXISTS ps;


DROP TABLE IF EXISTS ps.EXCEPTION_APP_RULE_LOCATION CASCADE;
DROP TABLE IF EXISTS ps.EXCEPTION_CONTACT_RULE_LOCATION CASCADE;
DROP TABLE IF EXISTS ps.EXCEPTION_APP_RULE_EVENT CASCADE;
DROP TABLE IF EXISTS ps.EXCEPTION_CONTACT_RULE_EVENT CASCADE;
DROP TABLE IF EXISTS ps.RULE_EVENT CASCADE;
DROP TABLE IF EXISTS ps.RULE_LOCATION CASCADE;
DROP TABLE IF EXISTS ps.LOCATION CASCADE;
DROP TABLE IF EXISTS ps.ACCESS_TOKEN CASCADE;
DROP TABLE IF EXISTS ps.REFRESH_TOKEN CASCADE;
DROP TABLE IF EXISTS ps.EVENT CASCADE;
DROP TABLE IF EXISTS ps.EXCEPTION_APP CASCADE;
DROP TABLE IF EXISTS ps.EXCEPTION_CONTACT CASCADE;
DROP TABLE IF EXISTS ps.SESSION;
DROP TABLE IF EXISTS ps.USER;

CREATE TABLE IF NOT EXISTS  ps.USER (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    username VARCHAR(40) NOT NULL,
    passwordHash VARCHAR(255) NOT NULL
    );

CREATE TABLE IF NOT EXISTS ps.SESSION(
    id SERIAL PRIMARY KEY,
    user_id integer NOT NULL REFERENCES ps.USER(id) ON DELETE CASCADE
    );


CREATE TABLE IF NOT EXISTS  ps.ACCESS_TOKEN(
    id SERIAL PRIMARY KEY,
    token VARCHAR(256) NOT NULL,
    session_id INTEGER NOT NULL REFERENCES ps.SESSION(id) ON DELETE CASCADE,
    created_at bigint not null,
    last_used_at bigint not NULL,
    expire_at bigint NOT NULL
    );

CREATE TABLE IF NOT EXISTS  ps.REFRESH_TOKEN(
    id SERIAL PRIMARY KEY,
    token VARCHAR(256) NOT NULL,
    session_id INTEGER NOT NULL  REFERENCES ps.SESSION(id) ON DELETE CASCADE,
    created_at bigint NOT NULL,
    expire_at bigint NOT NULL
    );

CREATE  TABLE IF NOT EXISTS  ps.EVENT(
    event_id BIGINT UNIQUE NOT NULL,
    calendar_id BIGINT NOT NULL,
    PRIMARY KEY (calendar_id, event_id, user_id),
    title VARCHAR(300) NOT NULL,
    user_id INTEGER NOT NULL REFERENCES ps.USER(id) ON DELETE CASCADE
    );

CREATE TABLE IF NOT EXISTS ps.LOCATION(
    id SERIAL UNIQUE NOT NULL,
    name VARCHAR(60),
    latitude DOUBLE PRECISION NOT NULL,
    longitude DOUBLE PRECISION NOT NULL,
    radius DOUBLE PRECISION CHECK(radius >= 0),
    UNIQUE(name,user_id),
    user_id integer NOT NULL REFERENCES ps.USER(id) ON DELETE CASCADE,
    PRIMARY KEY (id, user_id)
    );

CREATE TABLE IF NOT EXISTS ps.RULE_EVENT (
    id           SERIAL PRIMARY KEY,
    start_time   TIMESTAMP NOT NULL,
    end_time     TIMESTAMP NOT NULL,
    calendar_id  BIGINT NOT NULL,
    event_id     BIGINT NOT NULL,
    user_id      INTEGER NOT NULL,
    UNIQUE(user_id, start_time, end_time, calendar_id, event_id),
    CONSTRAINT fk_re_ruleevent_user
    FOREIGN KEY (user_id)
    REFERENCES ps.USER(id)
    ON DELETE CASCADE,
    CONSTRAINT fk_re_ruleevent_event
    FOREIGN KEY (calendar_id, event_id, user_id)
    REFERENCES ps.EVENT (calendar_id, event_id, user_id)
    ON DELETE CASCADE
    );



CREATE TABLE IF NOT EXISTS  ps.RULE_LOCATION(
    id serial PRIMARY KEY,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    location_id INTEGER NOT NULL REFERENCES ps.LOCATION(id) ON DELETE CASCADE,
    user_id INTEGER NOT NULL REFERENCES ps.USER(id) ON DELETE CASCADE,
    UNIQUE(start_time, end_time, location_id, user_id)
    );
